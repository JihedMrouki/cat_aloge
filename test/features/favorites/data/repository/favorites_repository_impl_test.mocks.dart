// Mocks generated by Mockito 5.4.4 from annotations
// in cat_aloge/test/features/favorites/data/repository/favorites_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cat_aloge/features/favorites/data/datasources/hive_favorites_datasource.dart'
    as _i2;
import 'package:cat_aloge/features/gallery/domain/datasources/photo_datasource.dart'
    as _i4;
import 'package:cat_aloge/features/gallery/domain/entities/cat_photo.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HiveFavoritesDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveFavoritesDataSource extends _i1.Mock
    implements _i2.HiveFavoritesDataSource {
  MockHiveFavoritesDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getFavoriteIds() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteIds,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<void> addFavorite(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [photoId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFavorite(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [photoId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isFavorite(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #isFavorite,
          [photoId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> toggleFavorite(String? photoId) => (super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [photoId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<int> getFavoritesCount() => (super.noSuchMethod(
        Invocation.method(
          #getFavoritesCount,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> clearAllFavorites() => (super.noSuchMethod(
        Invocation.method(
          #clearAllFavorites,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> exportFavorites() => (super.noSuchMethod(
        Invocation.method(
          #exportFavorites,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> importFavorites(List<String>? favoriteIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #importFavorites,
          [favoriteIds],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PhotoDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoDataSource extends _i1.Mock implements _i4.PhotoDataSource {
  MockPhotoDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i5.CatPhoto>> getCatPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getCatPhotos,
          [],
        ),
        returnValue: _i3.Future<List<_i5.CatPhoto>>.value(<_i5.CatPhoto>[]),
      ) as _i3.Future<List<_i5.CatPhoto>>);
}
